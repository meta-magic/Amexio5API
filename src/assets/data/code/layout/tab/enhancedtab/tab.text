import { DyanmicTabComponent } from './dynamictabdemo.component';

export class EnhancedTabDemo {

  tabArray: any;
  public rate: number = 7;
  public max: number = 10;
  public isReadonly: boolean = false;
  radioGroupData: any;

    constructor{
    this.tabarray = [
       "work"
    ]
    this.getHtmlAndTypeScriptCode();
    this.radioGroupData = {
      response: {
        data: [{
          gender: 'Male', genderId: 'male'
        }, {
          gender: 'Female', genderId: 'female'
        },]
      }
    }
  }

 //Method to add Tab Dynamically

  tabcount :number = 4;
  addtab(tab:any){
    this.tabcount++;
    let title = 'Tab '+this.tabcount;
    let cmp = tab.addDynamicTab(title,"red",true,DyanmicTabComponent);
    cmp.content = "Content of "+title;
  }

  //Method to close all tabs alltogether

  closeAllTabs(tab: any) {
    tab.closeAllTabs();
  }

  //Method to set tab active on the basis of tab sequence.(2 is the tab position from left to right)

  setActiveTabNumber(tab: any){
    tab.setActiveTab(2);
  }

  //Method to set tab active on the basis of tab title.("profile" is the tab title)

  setActiveTabTitle(tab: any) {
    tab.setActiveTab("profile")
  }

  //Method to close tabs and keep open some of the required tabs.

  closeOtherTabs(tab: any){
   tab.closeTabs(this.tabarray);
  }

  //Method to show tab on the basis of title.("work" is the tab title)
  (Can be possible if tab index is passed)

   showClickTab(tab: any) {
    tab.showTab("work");
    }

  //Method to hide tab on the basis of tab index. (Can be possible if tab title is passed)

    hideClickTab(tab: any) {
    tab.hideTab(2);
    }

  //Method to disable tab on the basis of tab title. (Can be possible if tab title is passed)
     
    disabledClickTab(tab: any){
    tab.disableTab(["work","education"]);
    };
  //Method to hide tab on the basis of tab index. (Can be possible if tab index is passed)

    disabledClickTab2(tab: any){
        tab.disableTab(2);
   }
}
